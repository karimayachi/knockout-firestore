"use strict";
exports.__esModule = true;
function mergeObjects(target, source) {
    var newTarget = target;
    var pSource = Object.getPrototypeOf(source);
    addPrototypeToEndOfChain(target, pSource);
    /* copy the properties (not on the prototype chain, but including the non-enumerable) to the target */
    for (var _i = 0, _a = Object.getOwnPropertyNames(source); _i < _a.length; _i++) {
        var key = _a[_i];
        var descriptor = Object.getOwnPropertyDescriptor(source, key);
        if (descriptor && (!descriptor.writable || !descriptor.configurable || !descriptor.enumerable || descriptor.get || descriptor.set)) {
            Object.defineProperty(target, key, descriptor);
        }
        else {
            target[key] = source[key];
        }
    }
    return newTarget;
}
exports.mergeObjects = mergeObjects;
function addPrototypeToEndOfChain(chain, prototype) {
    var pTarget = Object.getPrototypeOf(chain);
    if (pTarget === prototype) { /* prototype already added to this chain */
    }
    else if (pTarget === Object.prototype || pTarget === Function.prototype) { /* end of chain: add prototype */
        Object.setPrototypeOf(chain, prototype);
    }
    else { /* recursive go down chain */
        addPrototypeToEndOfChain(pTarget, prototype);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBZ0IsWUFBWSxDQUFtQixNQUFlLEVBQUUsTUFBZTtJQUUzRSxJQUFJLFNBQVMsR0FBeUMsTUFBTSxDQUFDO0lBQzdELElBQUksT0FBTyxHQUFRLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakQsd0JBQXdCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLHNHQUFzRztJQUN0RyxLQUFnQixVQUFrQyxFQUFsQyxLQUFBLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsRUFBbEMsY0FBa0MsRUFBbEMsSUFBa0MsRUFBRTtRQUEvQyxJQUFJLEdBQUcsU0FBQTtRQUNSLElBQUksVUFBVSxHQUFtQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTlGLElBQUksVUFBVSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDaEksTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ2xEO2FBQ0k7WUFDSyxNQUFPLENBQUMsR0FBRyxDQUFDLEdBQVMsTUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNDO0tBQ0o7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBcEJELG9DQW9CQztBQUVELFNBQVMsd0JBQXdCLENBQUMsS0FBVSxFQUFFLFNBQWM7SUFDeEQsSUFBSSxPQUFPLEdBQVEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVoRCxJQUFHLE9BQU8sS0FBSyxTQUFTLEVBQUUsRUFBRywyQ0FBMkM7S0FDdkU7U0FDSSxJQUFHLE9BQU8sS0FBSyxNQUFNLENBQUMsU0FBUyxJQUFJLE9BQU8sS0FBSyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsaUNBQWlDO1FBQ3ZHLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQzNDO1NBQ0ksRUFBRSw2QkFBNkI7UUFDaEMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ2hEO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtZXJnZU9iamVjdHM8VFRhcmdldCwgVFNvdXJjZT4odGFyZ2V0OiBUVGFyZ2V0LCBzb3VyY2U6IFRTb3VyY2UpOiBUVGFyZ2V0ICYgVFNvdXJjZSB7XG5cbiAgICBsZXQgbmV3VGFyZ2V0OiBUVGFyZ2V0ICYgVFNvdXJjZSA9IDxUVGFyZ2V0ICYgVFNvdXJjZT50YXJnZXQ7XG4gICAgbGV0IHBTb3VyY2U6IGFueSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpO1xuICAgIFxuICAgIGFkZFByb3RvdHlwZVRvRW5kT2ZDaGFpbih0YXJnZXQsIHBTb3VyY2UpO1xuXG4gICAgLyogY29weSB0aGUgcHJvcGVydGllcyAobm90IG9uIHRoZSBwcm90b3R5cGUgY2hhaW4sIGJ1dCBpbmNsdWRpbmcgdGhlIG5vbi1lbnVtZXJhYmxlKSB0byB0aGUgdGFyZ2V0ICovXG4gICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZSkpIHtcbiAgICAgICAgbGV0IGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciB8IHVuZGVmaW5lZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpO1xuXG4gICAgICAgIGlmIChkZXNjcmlwdG9yICYmICghZGVzY3JpcHRvci53cml0YWJsZSB8fCAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgfHwgIWRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBkZXNjcmlwdG9yLmdldCB8fCBkZXNjcmlwdG9yLnNldCkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoPGFueT50YXJnZXQpW2tleV0gPSAoPGFueT5zb3VyY2UpW2tleV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3VGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBhZGRQcm90b3R5cGVUb0VuZE9mQ2hhaW4oY2hhaW46IGFueSwgcHJvdG90eXBlOiBhbnkpIHtcbiAgICBsZXQgcFRhcmdldDogYW55ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNoYWluKTtcblxuICAgIGlmKHBUYXJnZXQgPT09IHByb3RvdHlwZSkgeyAgLyogcHJvdG90eXBlIGFscmVhZHkgYWRkZWQgdG8gdGhpcyBjaGFpbiAqL1xuICAgIH1cbiAgICBlbHNlIGlmKHBUYXJnZXQgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcFRhcmdldCA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7IC8qIGVuZCBvZiBjaGFpbjogYWRkIHByb3RvdHlwZSAqL1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2hhaW4sIHByb3RvdHlwZSk7XG4gICAgfVxuICAgIGVsc2UgeyAvKiByZWN1cnNpdmUgZ28gZG93biBjaGFpbiAqL1xuICAgICAgICBhZGRQcm90b3R5cGVUb0VuZE9mQ2hhaW4ocFRhcmdldCwgcHJvdG90eXBlKTtcbiAgICB9XG59Il19